C51 COMPILER V9.60.0.0   I2CDEC                                                            01/09/2020 16:30:01 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE I2CDEC
OBJECT MODULE PLACED IN .\Output\I2CDec.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE I2CDec.c LARGE OPTIMIZE(7,SPEED) BROWSE INCDIR(..\..\Library\Device\Incl
                    -ude;..\..\Library\StdDriver\inc) DEBUG OBJECTEXTEND PRINT(.\LST\I2CDec.lst) TABS(2) OBJECT(.\Output\I2CDec.obj)

line level    source

   1          #include "I2CDev.h"
   2          //========================================================================================================
   3          bit I2C_Reset_Flag;
   4          void Init_I2C(void)
   5          {
   6   1          P13_OPENDRAIN_MODE;          // Modify SCL pin to Open drain mode. don't forget the pull high resister
             - in circuit
   7   1          P14_OPENDRAIN_MODE;          // Modify SDA pin to Open drain mode. don't forget the pull high resister
             - in circuit
   8   1          /* Set I2C clock rate */
   9   1          I2CLK = I2C_CLOCK; 
  10   1          /* Enable I2C */
  11   1          set_I2CON_I2CEN;                                   
  12   1      }
  13          //========================================================================================================
  14          void I2C_SI_Check(void)
  15          {
  16   1        if (I2STAT == 0x00)
  17   1        {
  18   2          I2C_Reset_Flag = 1;
  19   2          set_I2CON_STO;
  20   2          SI = 0;
  21   2          if(SI)
  22   2          {
  23   3            clr_I2CON_I2CEN;
  24   3            set_I2CON_I2CEN;
  25   3          }   
  26   2        }  
  27   1      }
  28          
  29          void I2C_Read(UINT8 REG,char* u8DAT,UINT8 len)
  30          {
  31   1          UINT8 u8Count=0;
  32   1          /* Step1 */
  33   1          set_I2CON_STA;                                /* Send Start bit to I2C EEPROM */
  34   1          clr_I2CON_SI;
  35   1          while (!SI);
  36   1          if (I2STAT != 0x08)                     /* 0x08:  A START condition has been transmitted*/
  37   1          {
  38   2              I2C_Reset_Flag = 1;
  39   2              //printf("\nI2C 'Send STA' error");
  40   2              goto Read_Error_Stop;
  41   2          }
  42   1      
  43   1          /* Step2 */
  44   1          I2DAT = (EEPROM_SLA | EEPROM_WR);       /* Send (SLA+W) to EEPROM */
  45   1          clr_I2CON_STA;                                /* Clear STA and Keep SI value in I2CON */    
  46   1          clr_I2CON_SI;
  47   1          while (!SI);
  48   1          if (I2STAT != 0x18)                     /* 0x18: SLA+W has been transmitted; ACK has been received */ 
             -             
  49   1          {
  50   2              I2C_Reset_Flag = 1;
  51   2              //printf("\nI2C 'Send SLA+W' error");
C51 COMPILER V9.60.0.0   I2CDEC                                                            01/09/2020 16:30:01 PAGE 2   

  52   2              goto Read_Error_Stop;
  53   2          }
  54   1          /* Step4 */
  55   1          I2DAT = REG;             /* Send I2C EEPROM's Low Byte Address */
  56   1          clr_I2CON_SI;
  57   1          while (!SI);
  58   1          if (I2STAT != 0x28)                     /* 0x28:  Data byte in S1DAT has been transmitted; ACK has bee
             -n received */             
  59   1          {
  60   2              I2C_Reset_Flag = 1;
  61   2              //printf("\nI2C 'Send I2C Low Byte Address' error");
  62   2              goto Read_Error_Stop;
  63   2          }
  64   1      
  65   1          /* Step5 */
  66   1          set_I2CON_STA;                                /* Repeated START */
  67   1          clr_I2CON_SI; 
  68   1          while (!SI);
  69   1          if (I2STAT != 0x10)                     /* 0x10: A repeated START condition has been transmitted */
  70   1          {
  71   2              I2C_Reset_Flag = 1;
  72   2              //printf("\nI2C 'Send STA' error");
  73   2              goto Read_Error_Stop;
  74   2          }
  75   1      
  76   1          /* Step6 */
  77   1          clr_I2CON_STA;                                /* Clear STA and Keep SI value in I2CON */
  78   1          I2DAT = (EEPROM_SLA | EEPROM_RD);       /* Send (SLA+R) to EEPROM */
  79   1          clr_I2CON_SI;
  80   1          while (!SI);
  81   1          if (I2STAT != 0x40)                     /* 0x40:  SLA+R has been transmitted; ACK has been received */
             -              
  82   1          {
  83   2              I2C_Reset_Flag = 1;
  84   2              //printf("\nI2C 'Send SLA+R' error");
  85   2              goto Read_Error_Stop;
  86   2          }
  87   1          /* Step7 */                             /* Verify I2C EEPROM data */
  88   1          for (u8Count = 0; u8Count <len; u8Count++)
  89   1          {
  90   2              set_I2CON_AA;                             /* Set Assert Acknowledge Control Bit */
  91   2              clr_I2CON_SI;
  92   2              while (!SI);
  93   2              if (I2STAT != 0x50)                 /* 0x50:Data byte has been received; NOT ACK has been returned
             - */              
  94   2              {
  95   3                  I2C_Reset_Flag = 1;
  96   3                  //printf("\nI2C 'No Ack' error");
  97   3                  goto Read_Error_Stop;
  98   3              }       
  99   2              u8DAT[u8Count] = I2DAT; 
 100   2              ////printf("%X ",u8DAT[u8Count]);
 101   2              //UART_Send_Data(UART0,u8DAT[u8Count]);
 102   2              
 103   2          }
 104   1      
 105   1          /* Step8 */
 106   1          clr_I2CON_AA;                                 /* Send a NACK to disconnect 24xx64 */
 107   1          clr_I2CON_SI;
 108   1          while (!SI);
 109   1          if (I2STAT != 0x58)                     /* 0x58:Data byte has been received; ACK has been returned */
 110   1          {
C51 COMPILER V9.60.0.0   I2CDEC                                                            01/09/2020 16:30:01 PAGE 3   

 111   2              I2C_Reset_Flag = 1;
 112   2              //printf("\nI2C 'Ack' error");
 113   2              goto Read_Error_Stop;
 114   2          }
 115   1          
 116   1        /* Step9 */    
 117   1          clr_I2CON_SI;
 118   1          set_I2CON_STO;
 119   1          while (STO)                        /* Check STOP signal */
 120   1          {
 121   2            I2C_SI_Check();
 122   2            if (I2C_Reset_Flag)
 123   2              goto Read_Error_Stop;
 124   2          }
 125   1          
 126   1      Read_Error_Stop: 
 127   1          if (I2C_Reset_Flag)
 128   1          {
 129   2              I2C_SI_Check();
 130   2              //printf("\nI2C Read error, test stop");
 131   2              I2C_Reset_Flag = 0;
 132   2          }
 133   1      }
 134          //========================================================================================================
 135          void I2C_Write(UINT8 REG,UINT8 u8DAT)
 136          {
 137   1          set_I2CON_STA;                                /* Send Start bit to I2C EEPROM */         
 138   1          clr_I2CON_SI;
 139   1          while (!SI);
 140   1          if (I2STAT != 0x08)                     /* 0x08:  A START condition has been transmitted*/
 141   1          {
 142   2              I2C_Reset_Flag = 1;
 143   2              //printf("\nI2C 'Send STA' error");
 144   2              goto Write_Error_Stop;
 145   2          }
 146   1          /* Step2 */
 147   1          clr_I2CON_STA;                                /* Clear STA and Keep SI value in I2CON */
 148   1          I2DAT = EEPROM_SLA | EEPROM_WR;         /* Send (SLA+W) to EEPROM */
 149   1          clr_I2CON_SI;
 150   1          while (!SI);
 151   1          if (I2STAT != 0x18)                     /* 0x18: SLA+W has been transmitted; ACK has been received */ 
             -            
 152   1          {
 153   2              I2C_Reset_Flag = 1;
 154   2              //printf("\nI2C 'Send SLA+W' error");
 155   2              goto Write_Error_Stop;
 156   2          }
 157   1      
 158   1          /* Step4 */
 159   1          I2DAT = REG;             /* Send EEPROM's Low Byte Address */
 160   1          clr_I2CON_SI;
 161   1          while (!SI);
 162   1          if (I2STAT != 0x28)                     /* 0x28:  Data byte in S1DAT has been transmitted; ACK has bee
             -n received */
 163   1          {
 164   2              I2C_Reset_Flag = 1;
 165   2              //printf("\nI2C 'Send Low byte address' error");
 166   2              goto Write_Error_Stop;
 167   2          }
 168   1      
 169   1          /* Step5 */
 170   1                                                  /* Write data to I2C EEPROM */
C51 COMPILER V9.60.0.0   I2CDEC                                                            01/09/2020 16:30:01 PAGE 4   

 171   1          I2DAT = u8DAT;                      /* Send data to EEPROM */
 172   1          clr_I2CON_SI;
 173   1          while (!SI);
 174   1          if (I2STAT != 0x28)                 /* 0x28:  Data byte in S1DAT has been transmitted; ACK has been rece
             -ived */
 175   1          {
 176   2              I2C_Reset_Flag = 1;
 177   2              //printf("\nI2C 'Write Data' error");
 178   2              goto Write_Error_Stop;
 179   2          } 
 180   1          ////printf("write success\n");        
 181   1                                                  //After STOP condition, a inner EEPROM timed-write-cycle 
 182   1                                                  //will occure and EEPROM will not response to outside command
 183   1                                                  /* 0x18: SLA+W has been transmitted; ACK has been received */
 184   1          /* Step6 */
 185   1          do
 186   1          {
 187   2              set_I2CON_STO;                            /* Set I2C STOP Control Bit */
 188   2              clr_I2CON_SI;
 189   2              while (STO)                        /* Check STOP signal */
 190   2              {
 191   3                I2C_SI_Check();
 192   3                if (I2C_Reset_Flag)
 193   3                  goto Write_Error_Stop;
 194   3              }
 195   2              
 196   2              set_I2CON_STA;                            /* Check if no ACK is returned by EEPROM, it is under ti
             -med-write cycle */
 197   2              clr_I2CON_SI;
 198   2              while (!SI);
 199   2              if (I2STAT != 0x08)                 /* 0x08:  A START condition has been transmitted*/
 200   2              {
 201   3                  I2C_Reset_Flag = 1;
 202   3                  //printf("\nI2C 'Wait Ready' error");
 203   3                  goto Write_Error_Stop;
 204   3              }
 205   2      
 206   2              clr_I2CON_STA;                            /* Clear STA and Keep SI value in I2CON */
 207   2              I2DAT = (EEPROM_SLA | EEPROM_WR);   /* Send (SLA+W) to EEPROM */
 208   2              clr_I2CON_SI;
 209   2              while (!SI);
 210   2          }while(I2STAT != 0x18);
 211   1      
 212   1          /* Step7 */
 213   1          set_I2CON_STO;                                /* Set STOP Bit to I2C EEPROM */
 214   1          clr_I2CON_SI;
 215   1          while (STO)                        /* Check STOP signal */
 216   1          {
 217   2            I2C_SI_Check();
 218   2            if (I2C_Reset_Flag)
 219   2              goto Write_Error_Stop;
 220   2          }
 221   1          
 222   1      Write_Error_Stop: 
 223   1          if (I2C_Reset_Flag)
 224   1          {
 225   2              I2C_SI_Check();
 226   2              I2C_Reset_Flag  = 0;
 227   2              //printf("\nI2C Write error, test stop");
 228   2          }
 229   1      }
 230          //========================================================================================================
C51 COMPILER V9.60.0.0   I2CDEC                                                            01/09/2020 16:30:01 PAGE 5   

 231          
 232          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    403    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
